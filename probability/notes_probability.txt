语言特性是为了服务我们的编程思想，而不是去迎合某个语言特性来编程。
设计很重要：变量命名、接口设计、对象封装

1.代码规范
 看完了coding style of Linux kernel 写的这个项目，写的过程中一点点的开始不是嫌弃自己的代码，而是欣赏什么样的代码易读，清晰。
 attention:
 	, 后面加一个空格
	一元运算后不用空格，二元/三元运算的前后都加一个空格
	while/for/if/else/switch 后都加一个空格
	头文件中，都要用#ifndef #endif来防止头文件被重复包含，
	          同一功能模块的代码中，结构体的定义一般放在函数声明前面	         	  只有对外的接口或者抽象数据结构才在头文件中声明或定义
	头文件对应的.c文件中，include 其头文件
			      引入顺序遵循：系统头文件 标准库文件 自定义的头文件
	.ic 文件是可被包含的源文件
	文件的最后不要留空行
	表达式一行放不下时，如果是函数调用，第二行与函数的第一个参数对齐，
			    如果是计算，第二行的以操作符开始

2.设计design
变量的功能属性要专一
不要暴露内部结构
抽象数据结构中，接口应该为不同对象同一操作的不同实现，不同对象的同一操作的同一实现发在全局里面
当形参个数很多的时候想想，是不是可以放到一个抽象数据结构中
对象的创建和销毁是一套的，先free对象中的指针类型，再free对象本省
			  create()/free()
              		  或init(&obj)/free()
3.#define 宏定义
宏定义就是文本替换
可实现c++中的模板，c99标准中 _Generic 实现重载
防止头文件被包含的宏定义中，宏名为文件名_H,_开头的变量名给系统定义用
## 用来连接identifier，##( 是错误的
#define n 20 中的n 会与抽象结构中的成员 n 发生冲突，所以宏定义和尽量用大写

4.指针不要乱用
实参调用时，指针类型的形参可传实参的引用&
malloc只会申请空间，并不做初始化
calloc申请空间，并初始化为0
realloc会改变原指针的地址，在回传原指针引用的时候，特别注意，用 ** 可以解决

5.自动变量的生命周期
自动变量在函数调用结束后就会销毁，所以 & 对自动变量小心，返回指针类型的自动变量要小心

